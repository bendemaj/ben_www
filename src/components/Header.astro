---
import { SITE } from "@config";
import Hr from "./Hr.astro";
import LinkButton from "./LinkButton.astro";

export interface Props {
  activeNav?: "" | "posts" | "tags" | "about" | "search";
}

const { activeNav } = Astro.props;

const removeTrailingSlash = (pathname: string) => {
  const matchTrailingSlash = /\w+\/$/;
  if (matchTrailingSlash.test(pathname)) return pathname.slice(0, -1);
  return pathname;
};
const pathname = removeTrailingSlash(Astro.url.pathname);
---

<header>
  <div class="nav-container">
    <div class="top-nav-wrap">
      
      <nav id="nav-menu" class="flex justify-between">
        {
          SITE.lightAndDarkMode && (
            <button
              id="theme-btn"
              class="focus-outline"
              title="Toggles light & dark"
              aria-label="auto"
              aria-live="polite"
            >
              <img
                src={`/assets/ðŸŒ‘.png`}
                id="moon-svg"
                width="48px"
                height="48px"
              />
              <img
                src={`/assets/ðŸŒ•.png`}
                id="sun-svg"
                width="48px"
                height="48px"
              />
            </button>
          )
        }
        <ul id="menu-items" class="flex flex-row">
          <li>
            <a
              href="/"
              class:list={{
                ["hover:text-neutral-900"]: true,
                ["text-neutral-900"]: pathname === "/",
              }}
            >
              Home
            </a>
          </li>
          <li>/</li>
          <li>
            <a
              href="/posts"
              class:list={{
                ["hover:text-neutral-900"]: true,
                ["text-neutral-900"]: pathname === "/posts",
              }}
            >
              Posts
            </a>
          </li>
          <!-- <li>/</li>
          <li>
            <LinkButton
              href="/search"
              className={`focus-outline p-3 sm:p-1 ${
                activeNav === "search" ? "active" : ""
              } flex`}
              ariaLabel="search"
              title="Search"
            >
              &#x1F50D;&#xFE0E;
            </LinkButton>
          </li> -->
        </ul>
      </nav>
    </div>
  </div>
  <Hr />
</header>

<style>
 
  .nav-container {
    @apply mx-auto flex max-w-3xl flex-col items-center justify-between ;
  }
  .top-nav-wrap {
    @apply relative flex w-full items-start justify-between p-4 sm:items-center sm:py-8;
  }

  nav {
    @apply flex w-full items-center sm:ml-2 sm:flex-row sm:justify-end sm:space-x-4 sm:py-0;
  }
  nav ul {
    @apply  gap-y-2 sm:ml-0 sm:mt-0 sm:w-auto sm:gap-y-0;
  }
  nav ul li {
    @apply flex items-center justify-center;
  }
  nav ul li a {
    @apply w-full px-4 py-3 text-center font-medium hover:text-skin-accent sm:my-0 sm:px-2 sm:py-1;
  }

</style>

<script>
  function toggleNav() {
    // Toggle menu
    const menuBtn = document.querySelector(".hamburger-menu");
    const menuIcon = document.querySelector(".menu-icon");
    const menuItems = document.querySelector("#menu-items");

    menuBtn?.addEventListener("click", () => {
      const menuExpanded = menuBtn.getAttribute("aria-expanded") === "true";
      menuIcon?.classList.toggle("is-active");
      menuBtn.setAttribute("aria-expanded", menuExpanded ? "false" : "true");
      menuBtn.setAttribute(
        "aria-label",
        menuExpanded ? "Open Menu" : "Close Menu"
      );
      menuItems?.classList.toggle("display-none");
    });
  }

  toggleNav();

  // Runs on view transitions navigation
  document.addEventListener("astro:after-swap", toggleNav);
</script>
